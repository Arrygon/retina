/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */
package idsc;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;

public final class DavisImu implements lcm.lcm.LCMEncodable {
  public int clock_usec;
  public float accel[];
  public float temperature;
  public float gyro[];

  public DavisImu() {
    accel = new float[3];
    gyro = new float[3];
  }

  public static final long LCM_FINGERPRINT;
  public static final long LCM_FINGERPRINT_BASE = 0x4ba65373abd0a8c0L;
  static {
    LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
  }

  public static long _hashRecursive(ArrayList<Class<?>> classes) {
    if (classes.contains(idsc.DavisImu.class))
      return 0L;
    classes.add(idsc.DavisImu.class);
    long hash = LCM_FINGERPRINT_BASE;
    classes.remove(classes.size() - 1);
    return (hash << 1) + ((hash >> 63) & 1);
  }

  @Override
  public void encode(DataOutput outs) throws IOException {
    outs.writeLong(LCM_FINGERPRINT);
    _encodeRecursive(outs);
  }

  @Override
  public void _encodeRecursive(DataOutput outs) throws IOException {
    outs.writeInt(this.clock_usec);
    for (int a = 0; a < 3; a++) {
      outs.writeFloat(this.accel[a]);
    }
    outs.writeFloat(this.temperature);
    for (int a = 0; a < 3; a++) {
      outs.writeFloat(this.gyro[a]);
    }
  }

  public DavisImu(byte[] data) throws IOException {
    this(new lcm.lcm.LCMDataInputStream(data));
  }

  public DavisImu(DataInput ins) throws IOException {
    if (ins.readLong() != LCM_FINGERPRINT)
      throw new IOException("LCM Decode error: bad fingerprint");
    _decodeRecursive(ins);
  }

  public static idsc.DavisImu _decodeRecursiveFactory(DataInput ins) throws IOException {
    idsc.DavisImu o = new idsc.DavisImu();
    o._decodeRecursive(ins);
    return o;
  }

  @Override
  public void _decodeRecursive(DataInput ins) throws IOException {
    this.clock_usec = ins.readInt();
    this.accel = new float[(int) 3];
    for (int a = 0; a < 3; a++) {
      this.accel[a] = ins.readFloat();
    }
    this.temperature = ins.readFloat();
    this.gyro = new float[(int) 3];
    for (int a = 0; a < 3; a++) {
      this.gyro[a] = ins.readFloat();
    }
  }

  public idsc.DavisImu copy() {
    idsc.DavisImu outobj = new idsc.DavisImu();
    outobj.clock_usec = this.clock_usec;
    outobj.accel = new float[(int) 3];
    System.arraycopy(this.accel, 0, outobj.accel, 0, 3);
    outobj.temperature = this.temperature;
    outobj.gyro = new float[(int) 3];
    System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3);
    return outobj;
  }
}
